use ::java::server::world::item::SingleItem
use ::java::data::advancement::predicate::ItemSubPredicate

use ::fetchr::storages::registry::CategroyRegistryData

struct ItemConfigurationBase {
	/// Namespaced id for this item. Should use your custom namespace, and not
	/// be the same as the minecraft item id.
	id: #[id] string,

	/// The minecraft item definition.
	///
	/// Checks can be overwritten in item_tests, by default all components from
	/// this item definition must match exactly.
	///
	/// This is always how the item is displayed, even if item_tests override
	/// some checks
	item: SingleItem,

	/// Additional checks the item must pass. All tests must match.
	/// If this is a list of lists, all sub-lists are options of which only one
	/// needs to match. At least one option from each sub-list needs to match.
	///
	/// By default, all components and negated components from the item field
	/// need to match.
	item_tests?: ItemTests,

	/// The translation key
	translation: #[translation_key] string,

	/// The icon of the item. Should represent the unicode codepoint in
	/// hexadecimal of a character that is retextured in the custom font.
	icon: string @4,

	/// The font definitions for the font. Defaults to the fetchr font set.
	icon_font?: struct {
		/// The font for display on the actionbar. Must be a list of 5 fonts, one
		/// for each row of the card. Each row must have the correct ascent value
		/// set do displace the charachter vertically.
		actionbar: [ #[id="font"] string ] @ 5
	}
}

type ItemTests = (
	[ItemTest]
	| [[ItemTest]]
)

struct ItemTest {
	type: #[id] #[dispatcher_key="fetchr:item_test"] string,
	...fetchr:item_test[[type]]
}

dispatch fetchr:item_test[fetchr:component] to struct {
	id: #[id(registry="data_component_type")] string,
	component: minecraft:data_component[[id]],
}

dispatch fetchr:item_test[fetchr:negated_component] to struct {
	id: #[id(registry="data_component_type")] string,
}

dispatch fetchr:item_test[fetchr:predicate] to struct {
	id: #[id="item_sub_predicate_type"] string,
	predicate: minecraft:item_sub_predicate[[id]],
}

struct ItemCategory {
	...CategroyRegistryData,
	weight: int,
	total_item_weight: int,
}

struct Category {
	...ItemCategory,
	items: [Item],
}

struct ActiveCategoryItem {
	...ActiveItem,
	global_weight: int
}

struct ActiveCategory {
	...ItemCategory,
	items: [ActiveCategoryItem],
}

struct Item {
	...ItemConfigurationBase,

	command_argument: #[item] string,

	/// The weight of this item within the current context. If inside a category,
	/// the category weight, if in a global context the global weight relative to
	/// all other items
	weight: int,

	/// Categories this item is in.
	categories: [ItemCategory],
}

struct ActiveItem {
	...Item,
	active_categories: [ItemCategory],
	weight_nom: int,
	weight_denom: int,
	multiple_categories?: boolean,
}