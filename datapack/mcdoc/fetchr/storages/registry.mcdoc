use ::java::server::util::text::Text
use ::fetchr::hud::HudComponentBase
use ::fetchr::item::ItemConfigurationBase

struct ItemRegistryData {
	...ItemConfigurationBase,

		/// Categories this item is in. Can be an id list or a list of compounds.
		categories: (
			[#[id] string]
			| [struct {
					/// The id of the referenced category
					id: #[id] string,
					/// The weight of the current item in this category. When not set,
					/// defaults to the item's default weight.
					weight?: int
			}]
		),
		/// The default weight for this item. If not set, defaults to 1.
		weight?: int
}

struct CategroyRegistryData {
	/// Namespaced id to uniquely identify the category within Fetchr
	id: #[id] string,

	/// This name is shown in the item tooltip of category chests.
	name: (
		#[until="1.21.5"] #[text_component] string
		| #[since="1.21.5"] Text
	),

	/// Tags this category belongs to. Changing `active_tags` in `fetchr:items`
	/// and then calling `fetchr:util/apply_active_item_tags` will only respect
	/// this category if any of these tags are included in `active_tags`.
	tags: [#[id] string],
}

struct HudComponentRegistryData {
	...HudComponentBase,
	
	/// In the hud menu, this can be used for custom settings. This is expected
	/// to have an empty text and a click event.
	settingsClickEvent?: (
		#[until="1.21.5"] #[text_component] string
		| #[since="1.21.5"] Text
	),

	/// Text to display between the icon and the value. Can be used to define
	/// `iconSeparatorAlignLeft` and `iconSeparatorAlignRight`at the same time.
	iconSeparator?: (
		#[until="1.21.5"] #[text_component] string
		| #[since="1.21.5"] Text
	),
}

struct PreferencesRegistryData {	
	id: #[id] string,

	textComponent: (
		#[until="1.21.5"] #[text_component] string
		| #[since="1.21.5"] Text
	),

	/// This can be used to show a custom hover event in the preferences menu.
	/// This is expected to have an empty text and a hover event.
	hoverText?: (
		#[until="1.21.5"] #[text_component] string
		| #[since="1.21.5"] Text
	),

	/// This can be used to show a custom hover event in the preferences menu,
	/// when the setting is changed to `disabled: true`.
	/// This is expected to have an empty text and a hover event.
	disabledHoverText?: (
		#[until="1.21.5"] #[text_component] string
		| #[since="1.21.5"] Text
	),

	/// The click event to run when clicking this preferences entry.
	/// This is expected to have an empty text and a click event.
	clickEvent: (
		#[until="1.21.5"] #[text_component] string
		| #[since="1.21.5"] Text
	),

	disabled?: boolean,

	hidden?: boolean,
}

dispatch minecraft:storage[fetchr:registries] to struct RegistryStorage {
	items: [ItemRegistryData],
	categories: [CategroyRegistryData],
	structures: [#[id=structure] string],
	hud_components: [HudComponentRegistryData],
	preferences: struct {
		main: [PreferencesRegistryData],
		custom_hud: [PreferencesRegistryData],
		adjust_card: [PreferencesRegistryData],
	}
}